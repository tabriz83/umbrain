<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>tabriz83.github.io/umbrain/</title>
   
   <link>http://tabriz83.github.io/umbrain/</link>
   <description>Memory Repository.</description>
   <language>en-uk</language>
   <managingEditor> taBRis</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>우리집에 GDB 있는데... 메모리 보고갈래? (1)</title>
	  <link>/umbrain//gdb-memory-day1</link>
	  <author>taBRis</author>
	  <pubDate>2017-01-22T06:41:00+00:00</pubDate>
	  <guid>/umbrain//gdb-memory-day1</guid>
	  <description><![CDATA[
	     <p><strong>출처 : <a href="https://bpsecblog.wordpress.com/2016/03/08/gdb_memory_1/">우리집에 GDB 있는데... 메모리 보고갈래? (1) - Hackerz on the Ship</a></strong></p>

<h2>들어가기에 앞서...</h2>

<blockquote>
<p>컴(존)알못들이여 오라.
보안 공부하다 높다란 진입장벽 앞에서 좌절하신 분들께 이 글을 바칩니다.
해커가 되겠다는 청운을 안고 대학을 입학했으나.. 4년 째 뉴비...★
컴알못인 제가 자세히 친절하게 하나하나 꼭꼭 씹어보겠습니다.</p>
</blockquote>

<hr>

<h2>Season 1. 우리집에 GDB있는데... 메모리 보고 갈래?</h2>

<h3>DAY #1. 듀근듀규뉸구누균ㄱ 첫만남</h3>

<p><br>
<img src="../assets/Post_Images/2017/01/22/gdb_memory_day1/gdb-memory-day1-intro.png" alt="*인트로*"></p>

<p>구체적으로 뭐하는지가 궁금하시다구여?
…뭘 하더라도 기초가 중요한 것 같네요.
메모리에 대한 썰부터 간단히 풀어볼게요!!
<br></p>

<p><img src="../assets/Post_Images/2017/01/22/gdb_memory_day1/gdb-memory-day1-1.png" alt="">
<em>[그림 1] 썰 주제 되십니다<sup id="fnref1"><a href="#fn1" rel="footnote">1</a></sup></em>
<br></p>

<hr>

<h4>1. 주소는 왜 때문에 0000 0000 ~ FFFF FFFF ???</h4>

<p>램은 몇 기가 쓰세여?<br>
제 노트북은 4GB의 램을 쓰고 있네요.</p>

<p><img src="../assets/Post_Images/2017/01/22/gdb_memory_day1/gdb-memory-day1-2.png" alt="">
<em>[그림 2] 이런거 은근 헷갈리지 않음요?</em>
<br></p>

<p>위의 계산에 의하면 4GB는 2^32 byte 사이즈의 메모리죠.</p>

<p>1Byte는 주소공간 한 개의 크기입니다<br>
즉, 4GB는 2^32개의 주소를 가질 수 있어요</p>

<p>그리고 1bit는 0 또는 1의 값만 가질 수 있기 때문에 32bit는 2^32만큼의 숫자를 표현할 수 있어요</p>

<p>32bit라는 것은 2^32개의 주소를 가지고 있다라는 뜻으로 이해하시면 됩니다!</p>

<p>그런데 우리가 메모리를 뭐로 접근합니까? 주소로 접근 하죠.<br>
32bit 운영체제는 수 표현을 최대 2^32까지 밖에 못 하기 때문에, 8GB나 16GB의 램을 가지고 있다고 하더라도 접근을 할 수가 없어요.</p>

<p>0000…0000(32개) 부터 1111….1111(32개) 까지를 보기 편하게 16진수로 변환하면?</p>

<p>00000000 ~ FFFFFFFF !</p>

<hr>

<h4>2. 유저 영역, 커널 영역은 왜 나뉘어져 있나</h4>

<p>시스템 운영에 필요한 메모리, 그리고 운영체제가 커널 영역에 올라가 있습니다.<br>
사용자가 운영체제가 올라가 있는 커널 영역에 마음대로 접근할 수 있다면…? 시스템이 안정적으로 운용될 수 없을거예여.</p>

<p>그렇기 때문에 사용자가 함부로 커널 영역에 접근할 수 없도록 메모리를 유저영역과 커널영역을 나누어 사용하는 겁니다.<br>
나누는 크기는 운영체제마다 다르고, 설정에 따라 영역의 크기를 조정할 수도 있어여.</p>

<hr>

<h4>3. 유저 영역의 메모리</h4>

<p>유저 메모리의 영역을 조금 더 자세히 살펴볼까요?</p>

<p><img src="../assets/Post_Images/2017/01/22/gdb_memory_day1/gdb-memory-day1-3.png" alt="">
<em>[그림 3] 안녕하새오 웬만한 기본서 펼치면 2n 페이지 쯤 있는 친구애오<sup id="fnref2"><a href="#fn2" rel="footnote">2</a></sup></em>
<br></p>

<h5>3-1. 코드영역</h5>

<p>일단 메모리에 코드가 올라옵니다. 코드가 뭐냐구요?</p>

<p><img src="../assets/Post_Images/2017/01/22/gdb_memory_day1/gdb-memory-day1-4.png" alt="">
<em>[그림 3] 네 바로 이겁니다</em>
<br></p>

<p>이런거 어디서 많이 봤죠? c소스를 컴파일하면 어셈블리 코드로 번역(?)되잖아요.<br>
이 저급한 애들이 코드 영역에 올라 간다는 거져ㅎㅎ<br>
주소보면 32bit 시스템에서 익숙한 0804~로 시작함다. 메모리에 코드1가 올라갈 때 보통 저 영역에 올라갑니다.
<br></p>

<h5>3-2. 데이터영역</h5>

<p>그 다음은 데이터 영역입니다.<br>
전역변수가 이 영역에 로드되는데 항상 동일한 메모리에 위치하게 됩니당.</p>

<p>사용자가 입력하는 값이 전역변수로 정의되어있다고 가정해봅시다.<br>
고정된 메모리 주소 그리고 그 주소에 원하는 값을 쓸 수 있다면? 익스플로잇에 활용될 가능성이 갱장히 높아지겠죠?</p>

<p>여기까지가 고정된 주소에 올라오는 영역입니다.
<br></p>

<h5>3-3. 힙영역</h5>

<p>힙 영역은 동적으로 메모리를 할당하여 사용하는 공간입니다.<br>
대표적인 메모리 할당 함수로는 malloc 이 있죠. malloc으로 필요한 공간을 할당하면 힙 영역을 쓰게 되는겁니다.<br>
쓰다가 필요 없어지면 해제 해주면 되죠.</p>

<p>이 말인 즉슨 내가 힙 영역에 어떤 값을 엄청 많이 뿌려놓고 free 해준 후<br>
다시 이 공간을 재사용한다면..? 후.. 뭔가 익스플로잇할 때 낭낭히 활용될 거 같죠?</p>

<p><em>후.. 방금 당신은 UAF를 배웠습니다.</em>
<br></p>

<h5>3-4. 스택영역</h5>

<p>마지막 두둥 (유저영역) 메모리의 가장 바닥부터 채워지는 스택이 있죠.<br>
스택은 거꾸로 자라는거 아시져?<br>
왜냐구요?<br>
스택이 끝도없이 위아래도 모르고 자라다가 커널 건드리면…. 주옥되잖아요…<br>
그래서 얘는 거꾸로 자라는 겁니다.<br>
스택영역은 함수인자나 지역변수들이 올라옵니다.<br>
보통 스택 주소보면 0xbfff 이런식이예요.  </p>

<p>힙과 스택은 고정된 메모리에 올라오는 것이 아니기 때문에, 이 영역을 활용해 한번에 깔끔하게 쉘 따기란 넘나 어려운 것…</p>

<p>다음 포스팅엔 gdb 활용법으로 찾아오도록 할게여.<br>
메모리 구조를 gdb를 통해 뜯어보는 시간도 가져보도록 하겠슴다. 그럼 뿅★</p>

<p><em>written by in09</em></p>

<div class="footnotes">
<hr>
<ol>

<li id="fn1">
<p>[그림 1]: Pictogram(crown) created by Paul Verhulst from Noun Project&nbsp;<a href="#fnref1" rev="footnote">&#8617;</a></p>
</li>

<li id="fn2">
<p>[그림 3]: Pictogram(book) created by Jakub Caja from Noun Project&nbsp;<a href="#fnref2" rev="footnote">&#8617;</a></p>
</li>

</ol>
</div>

	  ]]></description>
	</item>

	<item>
	  <title>초보자를 위한 시스템해킹 공부 가이드라인</title>
	  <link>/umbrain//System_Hacking_Study_Guide_for_Beginner</link>
	  <author>taBRis</author>
	  <pubDate>2017-01-21T02:17:00+00:00</pubDate>
	  <guid>/umbrain//System_Hacking_Study_Guide_for_Beginner</guid>
	  <description><![CDATA[
	     <p><strong>출처 : 초보자를 위한 시스템 해킹 공부 가이드라인 - <a href="https://www.facebook.com/HSPantom">홍승표 作</a>(a.k.a Phantom)</strong></p>

<h2>1. 기본기</h2>

<ul>
<li><mark>C언어</mark>, 객체 지향언어(C++, JAVA, Python etc...)중 하나 (개념이라도)</li>
<li><mark>리눅스</mark></li>
<li><p><mark>네트워크 기초</mark> (네트워크의 개념, 각 패킷의 형태, OSI 7 Layer, 라우터, 스위치 정도만이라도)</p></li>
<li><p><strong>TechTree 1</strong>
<img src="../assets/Post_Images/2017/01/21/System_Hacking_Study_Guide_for_beginner/tech.png" alt="TechTree 1">
<br></p></li>
<li><p><strong>TechTree 2</strong>
<img src="../assets/Post_Images/2017/01/21/System_Hacking_Study_Guide_for_beginner/tech2.png" alt="TechTree 2"></p></li>
</ul>

<hr>

<h2>2. 전문분야</h2>

<p><strong>1. Pwnable</strong><br>
<strong>2. Reversing</strong>
<br></p>

<h3>2.1. Pwnable</h3>

<ul>
<li><strong>추천 공부 순서</strong><br>
<strong>1. <mark>달고나 문서</mark></strong><br>
<strong>2. <mark>Hackerz on the ship</mark> - 우리 집에 gdb있는데.. 메모리 보고갈래?</strong><br>
<strong>3. <mark>HackerSchool</mark><sup id="fnref1"><a href="#fn1" rel="footnote">1</a></sup>  FTZ traing 1~10, Level 1~20</strong><br>
<strong>4. HackerSchool Load of BOF 1~20</strong><br>
<strong>5. HackerSchool FC3</strong></li>
<li>처음에는 <mark>달고나 문서</mark>와 <mark>Hackerz on the ship의 문서</mark>를 읽는 것을 추천<strong><sup id="fnref2"><a href="#fn2" rel="footnote">2</a></sup></strong>. 리버싱도 마찬가지.</li>
<li><strong>여기까지 하는데도 상당한 시간이 걸린다.</strong></li>
<li>Training 1~10, Level 1~9까지는 처음에 왜 하는지 잘 이해가 가지 않을 수 있으나, 한번하고 나중에 다시보게 된다면 왜 이것을 했는지 이해할 수 있으며, 공부하면서 프로그래밍 등 기초가 흔들리는 자신의 모습을 볼 수 있을것.</li>
</ul>

<blockquote>
<p><strong>Phantom의 의견</strong></p>

<p>처음 공부할 때 어떻게 해야 할 지 몰라서 &#39;문제 풀이로 배우는 시스템 해킹 테크닉&#39;이라는 FTZ문제 풀이 책을 봤다. 이해가 가는 부분도 있고, 가지 않는 부분도 있을 것이다. 적어도 한번정도는 이해가 안가는 부분을 최대한 해보고, <mark>그래도 안되면 다음을 기약하며 넘기고</mark> 앞으로 계속 가기를 바란다.</p>

<p>FTZ를 풀고 LOB까지? FC3까지는 처음 혼자 해보다 <mark>잘 안되면 풀이를 보고 공부했다. 그리고 다시 풀이를 보지 않고 공부를 했다.</mark></p>

<p>해커스쿨의 각종 문서들과 발표자료 등 필요할 때 매우 자주 찾아보는 것을 추천한다.</p>

<p>그리고 문제풀이 라는 것은 FTZ Level9?부터 익스플로잇 코드까지 작성하는 것을 푸는 것이라 생각하는 것이 좋다.</p>
</blockquote>

<p><br></p>

<ul>
<li><strong>이후 추천 공부 순서</strong><br>
<strong>1. exploit-exercises.com - Nebula, Protostar, Fusion</strong><br>
<strong>2. OvertheWire - votex</strong><br>
<strong>3. Pwnable.kr</strong></li>
<li>이미 여기까지 할 수 있는 실력이라면 해킹방어대회(CTF)에 참가하면 순위권 안에 들지도 모른다.</li>
<li>Phantom이 공부한 책으로는 시스템 해킹 테크닉(FTZ), 해킹 공격의 예술이 Pwnable에는 해당되는 것 같다.</li>
<li>대부분이 문서로 존재한다.</li>
</ul>

<hr>

<h3>2.2 Reversing</h3>

<ul>
<li><strong>추천 공부 순서</strong><br>
<strong>1. Abex&#39;s Crackme 1~5</strong><br>
<strong>2. CodeEngn Basic RCE 1~20</strong><br>
<strong>3. Simples.kr Season 1 Crack, Unpack, Season 2 Reverse</strong><br>
<strong>4. CodeEngn Advanced RCE 1~18</strong><br>
<strong>5. Reversing.kr</strong><br></li>
</ul>

<blockquote>
<p><strong>Phantom의 의견</strong></p>

<p>처음 Reversing을 공부했을 때, 흔히 나뭇잎책, 방독면책 하는 바이블이라 불리는 책을 보면서 공부를 하는데, <u>하나도 몰랐다!!!</u></p>

<p>책을 따라가며 부분부분 이해하며 넘기긴 하는데, 정신을 차리면 영혼이 잠시 마실 나갔다 온 것처럼 기억을 못했고, 어셈블리어 한 줄 한 줄은 알겠는데, 전체적인 흐름이 보이지 않았다.</p>

<p>이런 이유로 리버싱을 자주 포기했었고, 거의 포기했다. <mark>역시 달고나 문서와 Hackerz on the ship의 문서를 읽길 바란다.</mark></p>

<p>멘토님이 한가지 과제를 주셨는데, Simples.kr Crackme 1~20 1번 Writeup 보고 풀고 1주일 후에 보고서 제출이었다. 진짜 더럽게 이해 안가고 그랬지만 1주일 안에 했다. 그리고 지금, 다시 문제를 푸니 전체적인 개념이 조금이나마 깃들어 있어 혼자 풀기 시작한다. 심지어 아주 쉬운 CTF문제 하나도 혼자 풀었다.</p>

<p>공부한 책으로는 나뭇잎, 방독면 등등 두 세 개 있는 것 같은데 대부분 레퍼런스로 보고 있다.</p>

<p>어셈블리어를 체화 하는 것에는 <mark>핸드레이</mark>(Hand+hex-ray)<strong><sup id="fnref3"><a href="#fn3" rel="footnote">3</a></sup></strong>가 좋다. C를 어셈으로, 어셈을 C로 풀어보는 것으로, 이것은 개인적인 의견이 아니라 대표님들이, 악성코드 분석 현업에 계신 분들이 말씀해 주신 것을 토대로 하는 이야기다.</p>

<p>이정도 할 생각이면 Pwnable이든, Reversing이든 크게 심적으로 힘들지 않을 것이다.</p>

<p>그리고 나뭇잎과 같은 책들은 처음엔 많이 어려울 수 있다. 하지만 선행학습이 된다면 그 내용들이 쉬워질 것이다. 나 또한 지금에서야 깨달은 것이지만 매우 쉽다. 아직 앞부분만이지만.</p>

<p>그 이후 PE부분부터는 OS지식에 대한 것이 부족하다는 것을 느낄 것이다. 그 때 부터 기본을 쌓기 시작할 수도 있다.</p>

<p>Crackme를 풀 때부터 Windows API를 보고 그럴 것이다. 그러면서 기초가 쌓인다. Codeengn은 시스템의 해커스쿨과 비슷한 곳이다. 그곳에서 문서를 쉽게 찾을 수 있을 것이다.</p>
</blockquote>

<hr>

<h2>3. 마무리</h2>

<p>Pwnable이든 Reversing이든 어느 정도의 기초지식은 Wargame을 통해 Writeup을 보고 먼저 한바퀴 만큼은 풀길 바란다. 그 이유는 적어도 이것이 어떤 것이라는 <u>적응</u>이 필요하기 때문이다. (특히 Reversing) 그리고 다시 돌아와서 제대로 공부하기를 바라며, 처음에 영혼없이 하더라도 이것이 어떤 것인지는 인식을 하고 있어야 한다.</p>

<p>공부하는 방법을 알아내는 것도 실력이고, 뭘 공부해야할지 알아내는 것도 실력이며, 뭘 공부할지 모를 때 오는 슬럼프를 극복하는 것도 실력이다.</p>

<p>어차피 공부하는 것은 혼자이다. 스터디에 들었다고, 팀에 들었다고 절대 내 실력이 오르는 것이 아니다. 이 생각이 제일 위험하고 자만하면 안된다.</p>

<p><strong>스스로 찾고 해결해 나가는 것이 중요하다.</strong></p>

<hr>

<h2>#1. 공부에 도움이 되는 사이트들</h2>

<table><thead>
<tr>
<th>분류</th>
<th>관련 사이트</th>
<th>비고</th>
</tr>
</thead><tbody>
<tr>
<td>침해사고 대응</td>
<td><a href="http://securitypractice.or.kr/index.php">http://securitypractice.or.kr/index.php</a></td>
<td>KISA에서 운영하는 침해사고 대응 훈련장</td>
</tr>
<tr>
<td>모의해킹</td>
<td><a href="http://hackerschool.org">http://hackerschool.org</a></td>
<td>시스템 해킹 실습 환경 제공 및 기타 정보들</td>
</tr>
<tr>
<td></td>
<td><a href="http://www.wechall.net">http://www.wechall.net</a></td>
<td>전세계 해킹 실습환경을 한곳에 모아둔 사이트</td>
</tr>
<tr>
<td></td>
<td><a href="http://webhacking.kr">http://webhacking.kr</a></td>
<td>웹 해킹 문제 풀이 사이트</td>
</tr>
<tr>
<td></td>
<td><a href="http://codeengn.com">http://codeengn.com</a></td>
<td>해킹관련 문서가 다량 보유된 사이트</td>
</tr>
<tr>
<td></td>
<td><a href="http://xcz.kr/START/challenge.php">http://xcz.kr/START/challenge.php</a></td>
<td>다양한 분야의 문제가 혼용된 사이트</td>
</tr>
<tr>
<td></td>
<td><a href="https://www.corelan.be/index.php/articles/">https://www.corelan.be/index.php/articles/</a></td>
<td>리버싱 등에 관한 상세한 기사들이 다수 존재하는 곳(영문)</td>
</tr>
<tr>
<td></td>
<td><a href="http://www.droidsec.org/wiki/#whitepapers">http://www.droidsec.org/wiki/#whitepapers</a></td>
<td>안드로이드 해킹에 대한 모든 정보가 있는 곳</td>
</tr>
<tr>
<td></td>
<td><a href="https://www.ietf.org/rfc.html">https://www.ietf.org/rfc.html</a></td>
<td>네트워크 프로토콜 RFC 자료</td>
</tr>
<tr>
<td></td>
<td><a href="http://www.owasp.net">http://www.owasp.net</a></td>
<td>OWASP, ESAPI등 관련 정보가 있는 곳</td>
</tr>
<tr>
<td></td>
<td><a href="http://resources.infosecinstitute.com">http://resources.infosecinstitute.com</a></td>
<td>아주 쉬운 기술 자료들이 모여있는 곳. 샘플도 제공(영문)</td>
</tr>
<tr>
<td></td>
<td><a href="http://www.wowhacker.com">http://www.wowhacker.com</a></td>
<td>언더해커 모임</td>
</tr>
<tr>
<td>프로그래밍</td>
<td><a href="http://www.pythonchallenge.com">http://www.pythonchallenge.com</a></td>
<td>Python 문제 풀이 사이트</td>
</tr>
<tr>
<td>포렌식</td>
<td><a href="http://maj3sty.tistory.com">http://maj3sty.tistory.com</a></td>
<td>개인이 운영하는 블로그로 포렌식 관련 자료 다수 보유</td>
</tr>
<tr>
<td></td>
<td><a href="http://forensic-proof.com">http://forensic-proof.com</a></td>
<td>플레인비트 김진국 대표가 운영하는 블로그</td>
</tr>
</tbody></table>

<hr>

<h2>#2. Reference to</h2>

<ul>
<li>보안 전문가의 길 (<a href="http://www.slideshare.net/seokhunhwnag/2015-v09">http://www.slideshare.net/seokhunhwnag/2015-v09</a>)</li>
<li>시스템 보안이란? (<a href="https://www.facebook.com/groups/438543032874514/1074936635901814/">https://www.facebook.com/groups/438543032874514/1074936635901814/</a>)</li>
<li>달고나 문서 (<a href="http://www.hackerschool.org/HS_Boards/data/Lib_system/buffer_overflow_foundation_pub.pdf">http://www.hackerschool.org/HS_Boards/data/Lib_system/buffer_overflow_foundation_pub.pdf</a>)</li>
<li>우리집에 gdb있는데.. 메모리 보고 갈래? (<a href="https://bpsecblog.wordpress.com/2016/03/08/%EC%9A%B0%EB%A6%AC%EC%A7%91%EC%97%90-gdb-%EC%9E%88%EB%8A%94%EB%8D%B0-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%B3%B4%EA%B3%A0%EA%B0%88%EB%9E%98-1/">https://bpsecblog.wordpress.com/2016/03/08/%EC%9A%B0%EB%A6%AC%EC%A7%91%EC%97%90-gdb-%EC%9E%88%EB%8A%94%EB%8D%B0-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%B3%B4%EA%B3%A0%EA%B0%88%EB%9E%98-1/</a>)</li>
<li>해킹 입문서, 커리큘럼, 테크트리, 리버싱 (<a href="http://blog.naver.com/93immm/130179760409">http://blog.naver.com/93immm/130179760409</a>)</li>
<li>Phantom이 쓴 Writeup (<a href="http://pantom.tistory.com">http://pantom.tistory.com</a>)</li>
</ul>

<div class="footnotes">
<hr>
<ol>

<li id="fn1">
<p>Wargame이라고 하며, 가상 OS에 취약점이 있는 환경을 만들어 각 단계에서 취약점을 공략하여 다음 단계로 올라가는 방식.  &nbsp;<a href="#fnref1" rev="footnote">&#8617;</a></p>
</li>

<li id="fn2">
<p>적어도 어떻게 돌아가는 것인지는 알아야 Reversing이든 Pwnable이든 가능하기 때문.  &nbsp;<a href="#fnref2" rev="footnote">&#8617;</a></p>
</li>

<li id="fn3">
<p>Hax-ray를 손으로 하는 방법.&nbsp;<a href="#fnref3" rev="footnote">&#8617;</a></p>
</li>

</ol>
</div>

	  ]]></description>
	</item>

	<item>
	  <title>참고 URL 스크랩</title>
	  <link>/umbrain//Facebook_scrap-20160308</link>
	  <author>taBRis</author>
	  <pubDate>2016-03-08T11:00:00+00:00</pubDate>
	  <guid>/umbrain//Facebook_scrap-20160308</guid>
	  <description><![CDATA[
	     <p><strong># MSF를 활용한 안드로이드 apk파일 백도어 제작 설명</strong>
<strong>출처 : <a href="https://techkernel.wordpress.com/2015/12/19/embed-metasploit-payload-in-apk-manually/">https://techkernel.wordpress.com/2015/12/19/embed-metasploit-payload-in-apk-manually</a></strong></p>

<blockquote>
<p>Embed a Metasploit Payload in an original .apk File | Part 2 – Do it manually</p>
</blockquote>

<hr>

<p><strong># MSSQL 환경에서 지속적인 공격을 위해 프로시저와 파워쉘을 활용한 사례</strong>
<strong>출처 : <a href="https://blog.netspi.com/sql-server-persistence-part-1-startup-stored-procedures/">https://blog.netspi.com/sql-server-persistence-part-1-startup-stored-procedures/</a></strong></p>

<blockquote>
<p>Maintaining Persistence via SQL Server – Part 1: Startup Stored Procedures</p>
</blockquote>

<hr>

<p><strong># IoT 보안 위키 페이지</strong>
<strong>출처 : <a href="https://iotsecuritywiki.com/">https://iotsecuritywiki.com</a></strong></p>

<blockquote>
<p>외국 동영상 강의 및 자료들 링크가 잘 되어있음</p>
</blockquote>

<hr>

<p><strong># Climber</strong>
<strong>출처 : <a href="http://www.kitploit.com/2016/03/climber-check-unixlinux-systems-for.html?utm_source=dlvr.it&amp;utm_medium=facebook/">http://www.kitploit.com/2016/03/climber-check-unixlinux-systems-for.html?utm_source=dlvr.it&amp;utm_medium=facebook</a></strong></p>

<blockquote>
<p>Climber - Check UNIX/Linux Systems For Privilege Escalation</p>
</blockquote>

<hr>

<p><strong># Blackpearl Security Blog</strong>
<strong>출처 : <a href="https://bpsecblog.wordpress.com/">https://bpsecblog.wordpress.com/</a></strong></p>

<blockquote>
<p>Hackerz on the Ship - Blackpearl Security Blog</p>
</blockquote>

<hr>

<p><strong># 2015년 주요 데이터 침해사고 조사 종합 보고서</strong>
<strong>출처 : <a href="http://www.verizonenterprise.com/DBIR/2015/">http://www.verizonenterprise.com/DBIR/2015/</a></strong></p>

<blockquote>
<p><a href="http://http://www.verizonenterprise.com/resources/reports/rp_data-breach-investigation-report-2015_en_xg.pdf">http://www.verizonenterprise.com/resources/reports/rp_data-breach-investigation-report-2015_en_xg.pdf</a></p>
</blockquote>

<hr>

<p><strong># CodeonWeb :: TensorFlow 강좌</strong>
<strong>출처 : <a href="https://codeonweb.com/%E2%80%A6/7e8c4944-308e-410e-85aa-644624613741">https://codeonweb.com/…/7e8c4944-308e-410e-85aa-644624613741</a></strong></p>

<blockquote>
<p>코드온웹에서 구글의 기계학습 프로그램인 TensorFlow를 이용하여, 기계 학습 및 딥 러닝을 간단히 배워볼 수 있는 코스를 준비했습니다. 웹에서 한국어 튜토리얼와 함께 바로 실습을 해 볼 수 있는 환경을 제공합니다.</p>
</blockquote>

<hr>

<p><strong># Python for Informatics: Exploring Information 직강</strong>
<strong>출처 : <a href="https://www.coursera.org/specializations/python">https://www.coursera.org/specializations/python</a></strong></p>

<blockquote>
<p>책읽는 대신에 듣는코스가 있는데, 초보자분들이 들으시면 좋을듯 해서 아직 모르시는 분들을 위해서 소개합니다. </p>

<p>Python for Informatics: Exploring Information 이라는 책의 저자 (Charles Severance, 미시건대 교수) 직강입니다. 프로그래밍을 전혀 모르는 사람들부터 들을 수 있도록 커리큘럼이 짜여져 있고, Specialization 코스이긴 한데, 공짜로 들을 수 있습니다. 책의 챕터를 나눠서 5-course series로 만들었고요. 아마 마지막 프로젝트코스인 Capstone코스는 그동안 돈안내셨으면 못들으실거에요. </p>

<p>이 코스가 좀 재미난 이유는 교수님이 포인트만 집어서 강의를 하기도 하고요. 학생들을 cheer-up시키기 위해 작은 퍼포먼스를 하기도 하고, 유명한 사람들 (파이썬창시자, jQuery창시자등)이나 외국에서 코스듣는 학생들과 직접 인터뷰해서 코스 중간중간에 끼워 넣기도 하고요. 그런 부분 보시는 재미도 쏠쏠할듯 하네요.</p>

<p>영어가 그리 어렵진 않지만, 그래도 혹 걱정되시면 비디오강의 보실때 캡션켜두시면 조금 도움이 될듯요. (단, 캡션이 100%정확하지 않다는건 염두에 두시고..)</p>
</blockquote>

<hr>

	  ]]></description>
	</item>

	<item>
	  <title>깃허브 인기 오픈소스 보안 툴 11선</title>
	  <link>/umbrain//security-git_open_source</link>
	  <author>taBRis</author>
	  <pubDate>2016-02-25T14:49:47+00:00</pubDate>
	  <guid>/umbrain//security-git_open_source</guid>
	  <description><![CDATA[
	     <p><strong>개발자/보안/오픈소스 :: InfoWorld</strong>
<strong>출처 : <a href="http://www.itworld.co.kr/print/89483">http://www.itworld.co.kr/print/89483</a></strong></p>

<blockquote>
<p>잡지 못할 버그는 없다”는 신념은 오픈소스 개발의 초석이다. 리누스의 법칙이라고 알려진 이 격언은 오픈소스 모델에서 보안 문제가 발생했을 때  IT 전문가들이 가장 먼저 떠올리는 말이기도 하다.</p>

<p>현재 깃허브 같은 인기 있는 코드 공유 사이트들 덕분에 오픈소스 커뮤니티는 악성코드를 분석하고 침입 테스트와 컴퓨터 포렌직을 수행하는 데 필요한 풍부한 보안 툴과 프레임워크를 제공하고 있어 다른 기업과 조직이 오픈소스 코드와 시스템을 안전하게 만드는 데 큰 도움을 주고 있다.</p>

<p>깃허브에서 인기를 얻고 있는 11가지의 필수 보안 프로젝트를 소개한다.<br>
더욱 안전한 코드와 시스템에 관심이 있는 운영자들이라면 반드시 확인해 보기 바란다.<br>
<a href="mailto:editor@itworld.co.kr">editor@itworld.co.kr</a></p>
</blockquote>

<p><strong>1. 메타스플로잇 프레임워크(Metasploit Framework)</strong></p>

<p><img src="https://cloud.githubusercontent.com/assets/13901916/13310589/a61c44c0-dbca-11e5-9801-1bf1a9244323.png" alt="Metasploit Framework" title="Metasploit Framework"><br>
메타스플로잇 프레임워크 오픈소스 커뮤니티와 보안업체 래피드7(Rapid7)가 주도하는 메타스플로잇 프레임워크(Metasploit Framework)는 침투 테스트를 위한 취약점 공격 개발 및 전달 시스템이다. 메타스플로잇 프레임워크에는 악의적인 공격자보다 먼저 취약점을 찾아냄으로써 애플리케이션의 보안 현황을 파악하는데 도움을 주는 취약점 공격 라이브러리가 포함되어 있으며, 윈도우, 리눅스, 맥, 안드로이드, iOS 등 다른 플랫폼용 소프트웨어를 테스트하는 데도 사용할 수 있다. 래피드7 엔지니어링 관리자 토드 비어슬리는 “메타스플로잇은 보안 연구원들이 상당히 일반적인 형식으로 취약점을 나타낼 수 있는 방법”이라며, “일반적인 컴퓨터, 전화기, 라우터, 스위치, 산업 제어 시스템, 임베디드 기기 등 모든 종류의 기기를 대상으로 한 수천 가지의 모듈을 가지고 있다. 메타스플로잇을 활용할 수 없는 소프트웨어나 펌웨어는 없다고 생각한다”고 강조했다.   </p>

<hr>

<p><strong>2. 브레이크맨(Breakeman)</strong></p>

<p><img src="https://cloud.githubusercontent.com/assets/13901916/13310590/acfe819a-dbca-11e5-983a-f1979440d472.png" alt="Breakeman" title="브레이크맨(Breakeman)">
브레이크맨 루비 온 레일스(Ruby on Rails) 앱을 위한 취약점 스캐너인 브레이크맨(Breakeman)은 프로그램의 한 부분에서 다른 부분으로 값을 추적하는 데이터 플로우 분석 기능도 제공한다. 브레이크맨의 저자이자 운영자인 저스틴 콜린스에 의하면, 이 소프트웨어를 사용하기 위해 애플리케이션 전체 스택을 설치할 필요는 없다. 브레이크맨은 &#39;블랙 박스(black box)&#39; 스캐너들보다 빨라 대형 애플리케이션도 단 몇 분만에 검사할 수 있다고 주장한다. 브레이크맨을 사용할 때는 긍정 오류(False Positives)에 주의해야 한다. 물론, 최근 이런 문제점을 해결하기 위한 교정 코드가 개발된 상태이다. 또한 웹사이트 보안 스캐너와 함께 사용해야 한다. 콜린스는 다른 플랫폼까지 브레이크맨을 확장시킬 계획은 없지만, 개발자들이 이 코드를 참고하는 것은 적극 장려한다는 입장이다. </p>

<hr>

<p><strong>3. 쿠쿠 샌드박스(Cuckoo Sandbox)</strong></p>

<p><img src="https://cloud.githubusercontent.com/assets/13901916/13310625/15fde64a-dbcb-11e5-89e4-b4c2ec2724bc.png" alt="쿠쿠 샌드박스(Cuckoo Sandbox)" title="쿠쿠 샌드박스(Cuckoo Sandbox)">
쿠쿠 샌드박스(Cuckoo Sandbox)는 자동화된 동적 악성코드 분석 시스템으로, 격리된 환경에서 의심스러운 파일을 검사하는데 사용된다. 쿠쿠 샌드박스 프로젝트 설립자인 클라우디오 과니에리는 “주요 목적은 윈도우 가상머신을 시작할 때 자동적으로 실행되고 내부에서 어떤 악성코드의 행동이라도 모니터링하는 것이다. 실행이 완료되면 쿠쿠는 수집된 데이터를 심층 분석하고 어떤 악성코드인지를 설명하는 통합 보고서를 만든다”고 설명했다. 분석을 통해 네이티브 함수와 윈도우 API 호출 추적, 생성되고 삭제된 파일의 사본, 분석 기기의 메모리 덤프 등의 데이터를 생성한다. 처리와 보고 방식은 맞춤형으로 설정할 수 있고, 결과 보고서는 JSON과 HTML 등의 다양한 포맷으로 생성할 수 있다. </p>

<hr>

<p><strong>4. 몰로치(Moloch)</strong></p>

<p><img src="https://cloud.githubusercontent.com/assets/13901916/13310627/20666828-dbcb-11e5-834e-99d4a49b6dcb.png" alt="몰로치(Moloch)" title="몰로치(Moloch)">
몰로치(Moloch)는 확장 가능한 IPv4 패킷 캡처 및 인덱싱, 데이터베이스 시스템으로, 데이터를 살펴보고 검색하고 외부로 내보내는 단순한 웹 인터페이스가 특징이다. HTTPS나 HTTP 약식 암호를 사용해 적용할 수 있으며, IDS 엔진을 대신하는 역할을 하지는 않는다. 몰로치는 모든 네트워크 트래픽을 표준 PCAP 형식으로 저장하고 인덱싱하며, 여러 시스템에 걸쳐서 배치할 수 있으며, 기가비트급 트래픽용으로 확장할 수도 있다. 캡처와 뷰어, 일래스틱서치(Elasticsearch)의 세 가지 요소로 구성되어 있다. 캡처는 단일 쓰레드의 C 애플리케이션으로 시스템 당 여러 개의 캡처 프로세스를 실행할 수 있으며, 뷰어는 Node.js 애플리케이션으로 웹 인터페이스와 PCAP 파일 전송을 담당한다. </p>

<hr>

<p><strong>5. 모즈데프(MozDef)</strong></p>

<p><img src="https://cloud.githubusercontent.com/assets/13901916/13310634/31cc0b72-dbcb-11e5-9f33-da1e7af6fb52.png" alt="모즈데프(MozDef)" title="모즈데프(MozDef)">
모질라 디펜스 플랫폼 ‘모즈데프(MozDef)’라는 이름으로 불리는 모질라 디펜스 플랫폼(Mozilla Defense Platform)은 보안 상황 처리 프로세스를 자동화해 공격자 정보를 확보할 수 있도록 한다. 프로젝트 저자 제프 브리너는 실시간 통합 플랫폼으로 모니터링과 대응, 협업을 진행하고 역량을 강화할 수 있다고 설명한다. 모즈데프는 전통적인 SIEM(Security Information and Event Management) 기능을 협업화된 상황 대응, 시각화, 다른 시스템으로의 손쉬운 통합으로 확장시켜 준다. 모즈데프는 일래스틱서치, 메테오(Meteor), 몽고DB(MongoDB)를 활용해 다양한 데이터를 수집하고, 이를 저마다의 알맞은 방식으로 유지한다. 브리너는 “모즈데프를 보안 상황 대응 워크플로우를 보조하는 일래스틱서치 상위의 SIEM 오버레이로 볼 수도 있다”고 설명했다. 이 프로젝트는 2013년 모질라 내에서 개념 검증 단계로 시작됐다. </p>

<hr>

<p><strong>6. 마이다스(MIDAS)</strong></p>

<p><img src="https://cloud.githubusercontent.com/assets/13901916/13310647/54c54b7a-dbcb-11e5-9f40-d983e5928ef1.png" alt="마이다스(MIDAS)" title="마이다스(MIDAS)">
Etsy와 페이스북 보안팀 사이의 협업을 기반으로 하는 마이다스(MIDAS)는 맥 침투 감지와 분석 시스템 구축 프레임워크다. 이 모듈식 프레임워크는 OS X의 지속 메커니즘에 대한 수정을 감지하기 위한 예시 모듈과 보조 유틸리티를 제공한다. 이 프로젝트는 자가 방어 보안(Homebrew Defensive Security)와 공격 주도형 방어(Attack-Driven Defense) 프레젠테이션에서 나온 개념을 기반으로 삼고 있다. Etsy와 페이스북 보안팀은 소개 문서를 통해 “이 프레임워크 발표에 있어서 우리의 공통 목표는 이 분야에 대한 토론을 활성화하고 기업이나 기관에 일반적인 감염 패턴을 탐지할 수 있도록 OS X 엔드포인트 관리를 위한 시작점을 제공하는데 있다”고 밝혔다. MIDAS 사용자는 호스트 기반 점검이나 인증, 분석 등을 위한 모듈을 정의할 수 있다. </p>

<hr>

<p><strong>7. 브로(Bro)</strong></p>

<p><img src="https://cloud.githubusercontent.com/assets/13901916/13310650/59029b98-dbcb-11e5-9289-609010ee6aa4.png" alt="브로(Bro)" title="브로(Bro)">
미국 캘리포니아주립대 국제컴퓨터공학연구소의 선임 연구원이자 브로(Bro)의 선도 개발자인 로빈 소머는 네트워크 분석 프레임워크인 브로가 많은 사람들이 생각하는 침입 탐지 시스템과는 완전히 다른 것이라고 말한다. 침입 탐지 시스템이 일반적으로 공격 패턴과 연관되는 것과 달리, 브로는 사용자들이 아주 높은 수준의 시맨틱 단계로 작업을 프로그래밍할 수 있어서 보통의 시스템들보다 더욱 강력한 프로그래밍 언어라는 것. 브로는 공격을 찾고 상황 정보와 사용 패턴을 제공한다. 그리고 네트워크 트래픽에 대한 정보를 얻고 네트워크 패킷을 조합해 네트워크 상의 시스템에 대한 가시성을 제공한다. 좀 더 일반적인 트래픽 분석을 위한 플랫폼도 제공한다. </p>

<hr>

<p><strong>8. OS X 오디터(OS X Auditor)</strong></p>

<p><img src="https://cloud.githubusercontent.com/assets/13901916/13310654/5d960460-dbcb-11e5-8e7f-3b35c6f05fc5.png" alt="OS X 오디터(OS X Auditor)" title="OS X 오디터(OS X Auditor)">
OS X 오디터(OS X Auditor)는 무료 컴퓨터 포렌직 툴로 구동되는 시스템이나 시스템 사본 상에 있는 의도치 않은 부산물들을 세밀하게 분석한다. 대상이 되는 부산물은 커널 확장자나 시스템이나 서드파티의 에이전트와 데몬, 사용하지 않은 기동 아이템, 사용자가 다운로드한 파일, 설치된 에이전트 등이다. 사용자가 따로 저장한 파일도 감사 대상 시스템의 사파리 히스토리, 파이어폭스 쿠키, 크롬 히스토리, 소셜과 이메일 계정, 와이파이 AP 등을 기반으로 추출한다. </p>

<hr>

<p><strong>9. 슬루트 키트(Sleuth Kit)</strong></p>

<p><img src="https://cloud.githubusercontent.com/assets/13901916/13310662/61a08756-dbcb-11e5-9b7d-a6e548ee099f.png" alt="슬루트 키트(Sleuth Kit)" title="슬루트 키트(Sleuth Kit)">
슬루트 키트(Sleuth Kit)는 라이브러리와 볼륨과 파일 시스템 데이터를 포함한 디스크 이미지 조사를 위한 명령줄 툴 콜렉션을 갖추고 있다. 이 키트는 플러그인 프레임워크를 제공해 사용자가 예를 들어 파일 컨텐츠를 분석하고 자동화된 시스템을 구축하기 위한 모듈 등을 추가할 수 있게 해준다. 마이크로소프트와 유닉스 시스템에 맞춰져 있으며, 조사자가 보안 사고 대응 중이거나 가동 중인 시스템의 이미지로부터 증거를 식별 복구할 수 있게 해준다. 슬루스 키트와 다른 툴의 상위 사용자 인터페이스의 역할을 수행하는 것은 디지털 포렌직 플랫폼인 오톱시(Autopsy)다. 슬루스 키트와 오톱시의 저작자인 브라이언 캐리어는 “오톱시는 좀 더 사용자 지향적이고, 슬루스 키트는 직접 사용하기 보다는 자체 툴에 통합하는 라이브러리에 가깝다”라고 설명했다. </p>

<hr>

<p><strong>10. OSSEC</strong></p>

<p><img src="https://cloud.githubusercontent.com/assets/13901916/13310665/6789cd4e-dbcb-11e5-8548-8ec73f1c8acb.png" alt="OSSEC" title="OSSEC">
OSSEC 호스트 기반 침입 탐지 시스템은 로그 분석, 파일 무결성 점검, 정책 모니터링, 경보, 리눅스, 맥 OS, 솔라리스, AIX, 윈도우 등을 포함한 다양한 시스템에 대한 능동적인 대응을 수행한다. OSSEC는 PCI와 HIPAA를 포함한 컴플라이언스 충족에 도움을 주고 인증 받지 않은 파일 시스템 수정과 소프트웨어와 커스텀 앱의 로그파일에 내장된 강의적인 행위를 감지하면 경보를 보내도록 구성할 수 있다. 중앙집중화된 관리 서버는 여러 운영체제에 걸쳐 정책을 관리한다. OSSEC는 트렌드마이크로가 지원하고 있다. </p>

<hr>

<p><strong>11. 패시브DNS(PassiveDNS)</strong>
<img src="https://cloud.githubusercontent.com/assets/13901916/13310668/6c9e0c8c-dbcb-11e5-89bf-604f0958217b.png" alt="패시브DNS(PassiveDNS)" title="패시브DNS(PassiveDNS)"></p>

<p>패시브DNS(PassiveDNS)는 보안 사고 처리, 네트워크 보안 모니터링, 디지털 포렌직을 지원하기 위해 수동적인 방식으로 DNS 기록을 수집한다. 이 소프트웨어는 PCAP 파일을 읽고 DNS 데이터를 로그 파일이나 스니프 트래픽으로 출력하도록 설정할 수 있다. 이 툴은 IPv4와 IPv6 트래픽에서 사용할 수 있으며, TCP와 UDP 프로토콜을 통해 트래픽을 분석하고, 중복 DNS 데이터를 메모리 내에 임시저장해 데이터 로그의 양을 제한한다. </p>

	  ]]></description>
	</item>


</channel>
</rss>
